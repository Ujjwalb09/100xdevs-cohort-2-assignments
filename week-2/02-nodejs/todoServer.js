/**
  You need to create an express HTTP server in Node.js which will handle the logic of a todo list app.
  - Don't use any database, just store all the data in an array to store the todo list data (in-memory)
  - Hard todo: Try to save responses in files, so that even if u exit the app and run it again, the data remains (similar to databases)

  Each todo has a title and a description. The title is a string and the description is a string.
  Each todo should also get an unique autogenerated id every time it is created
  The expected API endpoints are defined below,
  1.GET /todos - Retrieve all todo items
    Description: Returns a list of all todo items.
    Response: 200 OK with an array of todo items in JSON format.
    Example: GET http://localhost:3000/todos
    
  2.GET /todos/:id - Retrieve a specific todo item by ID
    Description: Returns a specific todo item identified by its ID.
    Response: 200 OK with the todo item in JSON format if found, or 404 Not Found if not found.
    Example: GET http://localhost:3000/todos/123
     
  3. POST /todos - Create a new todo item
    Description: Creates a new todo item.
    Request Body: JSON object representing the todo item.
    Response: 201 Created with the ID of the created todo item in JSON format. eg: {id: 1}
    Example: POST http://localhost:3000/todos
    Request Body: { "title": "Buy groceries", "completed": false, description: "I should buy groceries" }
    
  4. PUT /todos/:id - Update an existing todo item by ID
    Description: Updates an existing todo item identified by its ID.
    Request Body: JSON object representing the updated todo item.
    Response: 200 OK if the todo item was found and updated, or 404 Not Found if not found.
    Example: PUT http://localhost:3000/todos/123
    Request Body: { "title": "Buy groceries", "completed": true }
    
  5. DELETE /todos/:id - Delete a todo item by ID
    Description: Deletes a todo item identified by its ID.
    Response: 200 OK if the todo item was found and deleted, or 404 Not Found if not found.
    Example: DELETE http://localhost:3000/todos/123

    - For any other route not defined in the server return 404

  Testing the server - run `npm run test-todoServer` command in terminal
 */
  const express = require('express');
  const fs = require('fs');
  const bodyParser = require('body-parser');
  const app = express();
  app.use(bodyParser.json());

let todoList = [];

fs.readFile("todos.json", "utf-8", (err, data) => {
  if (!err) {
    todoList = JSON.parse(data);
  }
});


function checkUnqiueId(id){
    let newId = 0;
    let idArr = [];
    let oldId = id;
    let check  = false;

    for(let i = 0; i < todoList.length; i++){
      idArr.push(todoList[i].id);
    }

    while(idArr.includes(id)){
      newId = Math.floor(Math.random() * 20) + 1;
      id = newId;
      check = true;
    }
     
    return check === false ? oldId : newId;

}

  app.post("/todos", (request, response)=>{
        let todoBody = request.body;
        let uniqueID = Math.floor(Math.random() * 10) + 1;

        let id = checkUnqiueId(uniqueID);

        todoBody["id"] = id;
        todoList.push(todoBody);
        
        fs.writeFile("todos.json", JSON.stringify(todoList), (err) => {
          response.status(201).json({ id: id });
        });
        
  })

  app.get("/todos", (request, response)=>{
     
    response.json(todoList);
  })

  app.get("/todos/:id", (request, response)=>{
    const getId = parseInt(request.params.id);

      for(let i = 0; i < todoList.length; i++){
        if(todoList[i].id === getId){
          return response.json(todoList[i]);
        }
      }
      response.sendStatus(404);

  })

  app.delete("/todos/:id", (request, response)=>{
    const getId = parseInt(request.params.id);
    let check = false;

    if(todoList.length === 0){
      response.sendStatus(404);
    }

      for(let i = 0; i < todoList.length; i++){
        if(todoList[i].id === getId){
          check = true;
          todoList.splice(i, 1);
          fs.writeFile("todos.json", JSON.stringify(todoList), (err)=>{
            return response.sendStatus(200);
          })
        }
      }

      if(!check) response.sendStatus(404);
  })

  app.put("/todos/:id", (request, response)=>{
       const getId = parseInt(request.params.id);
       const bodyOBJ = request.body;
       let check = false;

       if(todoList.length === 0){
        response.sendStatus(404);
      }
  
        for(let i = 0; i < todoList.length; i++){
         if(todoList[i].id === getId){
          check = true;
           todoList[i].title = bodyOBJ.title;
           todoList[i].completed = bodyOBJ.completed;

           fs.writeFile("todos.json", JSON.stringify(todoList), (err)=>{
             return response.sendStatus(200);
           })
         }
        }

        if(!check) response.sendStatus(404);
  })

  app.listen(3001);
  
  module.exports = app;